encryption = "age"

{{/* boolean feature tags */}}
{{- $work := promptBoolOnce . "work" "Is this a work machine" -}}{{/* true if this machine is a work machine */}}
{{- $private := not $work -}}{{/* true if this machine should have private configuration  */}}
{{- $headless := false -}}{{/* true if this machine does not have a screen and keyboard */}}
{{- "" -}}

{{/* prompt for user specific configuration */}}
{{- $hostname := promptStringOnce . "hostname" "Hostname" -}}{{/* set the hostname */}}
{{- $useremail := promptStringOnce . "useremail" "Email address" -}}{{/* set the useremail address */}}
{{- $gitUsername := promptStringOnce . "gitUsername" "GitHub username" -}}{{/* set the github username */}}
{{- $gitEmail := promptStringOnce . "gitEmail" "Git useremail" -}}{{/* set the github useremail */}}

{{- $osID := .chezmoi.os -}}
{{- if (and (eq .chezmoi.os "linux") (hasKey .chezmoi.osRelease "id")) -}}
{{-   $osID = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{- end -}}

{{/* detect GitHub codespaces, VSCode remote containers, Docker containers, Multipass VMs, and Vagrant boxes */}}
{{- if or (env "CODESPACES") (env "REMOTE_CONTAINERS_IPC") (eq .chezmoi.username "root" "ubuntu" "vagrant" "vscode") -}}
{{-   $headless = true -}}
{{- end -}}

{{/* prompt for headless if stdin is a TTY */}}
{{- if stdinIsATTY -}}
{{-   $headless = promptBoolOnce . "headless" "headless" -}}
{{- else -}}
{{-   $headless = true -}}
{{- end -}}

{{/* get the timezone from ip-api.com */}}
{{- $timezone := index (fromJson (output "curl" "-s" "http://ip-api.com/json/")) "timezone" -}}

[data]
hostname = {{ $hostname | quote }}
useremail = {{ $useremail | quote }}
gitUsername = {{ $gitUsername | quote }}
gitEmail = {{ $gitEmail | quote }}
work = {{ $work }}
private = {{ $private }}
headless = {{ $headless }}
osid = {{ $osID | quote }}
timezone = {{ $timezone | quote }}

[edit]
command = "code"
args = ["--wait"]

[diff]
pager = "diff-so-fancy"

[merge]
command = "bash"
args = [
    "-c",
    "cp {{ "{{ .Target }}" }} {{ "{{ .Target }}" }}.base && code --new-window --wait --merge {{ "{{ .Destination }}" }} {{ "{{ .Target }}" }} {{ "{{ .Target }}" }}.base {{ "{{ .Source }}" }}",
]

[age]
identity = "~/.ssh/private"
recipientsFile = "~/.ssh/private.pub"