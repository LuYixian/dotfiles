{
  description = "YixianLu's system flake";

  inputs = {
    # flake-utils
    flake-utils.url = github:numtide/flake-utils;

    # nixpkgs
    nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";

    # nix-darwin
    nix-darwin = {
      url = "github:LnL7/nix-darwin";
      inputs.nixpkgs.follows = "nixpkgs";
    };

    # mac-app-util
    mac-app-util.url = "github:hraban/mac-app-util";

    # flakey-profile
    flakey-profile.url = "github:lf-/flakey-profile";

    # nix-homebrew
    nix-homebrew.url = "github:zhaofengli-wip/nix-homebrew";
    # Optional: Declarative tap management
    homebrew-core = {
      url = "github:homebrew/homebrew-core";
      flake = false;
    };
    homebrew-cask = {
      url = "github:homebrew/homebrew-cask";
      flake = false;
    };
    homebrew-bundle = {
      url = "github:homebrew/homebrew-bundle";
      flake = false;
    };
  };

  outputs = inputs @ {
    self,
    flake-utils,
    nixpkgs,
    nix-darwin,
    mac-app-util,
    flakey-profile,
    nix-homebrew,
    homebrew-core,
    homebrew-cask,
    homebrew-bundle,
    ...
  }: let
    # TODO replace with your own username, system and hostname
    {{ $arch := .chezmoi.arch }}
    {{- if eq $arch "arm64" -}}
      {{- $arch = "aarch64" -}}
    {{- end -}}
    system = "{{ $arch }}-{{ .chezmoi.os }}"; # aarch64-darwin or x86_64-darwin
    hostname = "{{ .hostname }}";
    username = "{{ .chezmoi.username }}";

    pkgs = import nixpkgs {
      inherit system;
      config = {
        allowUnfree = true;
      };
    };

    myProfile = import ./modules/profile.nix {
      inherit pkgs flakey-profile;
    };

    specialArgs =
      inputs
      // {
        inherit username hostname;
      };
  in {
    # Build darwin flake using:
    # $ darwin-rebuild build --flake .#macbook

    darwinConfigurations."${hostname}" = nix-darwin.lib.darwinSystem {
      inherit system specialArgs;
      modules = [
        ./modules/nix-core.nix
        ./modules/system.nix
        ./modules/apps.nix
        ./modules/overlays.nix
        ./modules/host-users.nix
        mac-app-util.darwinModules.default
        nix-homebrew.darwinModules.nix-homebrew
        {
          nix-homebrew = {
            # Install Homebrew under the default prefix
            enable = true;
            # Apple Silicon Only: Also install Homebrew under the default Intel prefix for Rosetta 2
            enableRosetta =
              if system == "aarch64-darwin"
              then true
              else false;
            # User owning the Homebrew prefix
            user = username;
          };
        }
      ];
    };

    packages.${system}."${hostname}" = myProfile;

    # nix code formatter
    formatter.${system} = nixpkgs.legacyPackages.${system}.alejandra;
  };
}
